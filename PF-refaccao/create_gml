# encoding: utf-8

import pandas as pd

ano = "2017"

anos = ["1960","1961","1962","1963","1964","1965","1966","1967","1968","1969","1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982","1983","1984","1985","1986","1987","1988","1989","1990","1991","1992","1993","1994","1995","1996","1997","1998","1999","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017"]

file = open('homicides11to17.gml','w') 

df = pd.read_csv(r'unhcr_popstats_export_time_series_all_data.csv', encoding='utf-8',low_memory=False)
df2 = pd.read_csv(r'homicides2011.csv', encoding='utf-8', low_memory=False)

id_node = 0
countries = []
dic = {} 

file.write('graph ['+'\n') 
file.write('  directed 1'+'\n')

# Adiciona na lista countries todos os países (nós) que haverão no programa

#print(df2)

for index, row in df.iterrows():

	if row['Origin'] in countries:

		pass

	else:

		if row['Origin'] != 'Various/Unknown':

			countries.append(row['Origin'])
			#print(row['Origin'])

	if row['Country / territory of asylum/residence'] in countries:

		pass

	else:

		if row['Country / territory of asylum/residence'] != 'Various/Unknown':
			countries.append(row['Country / territory of asylum/residence'])

## Cria todos os nodes no arquivo .gml

#print(countries)
#print("len"+ str(len(countries)))
#print("pos"+str(countries.index("Slovenia")))

countries2 = []
#print(df2)
for pais in countries:

	for index, row in df2.iterrows():
		#print(row['Country Name'], row['Country Code'], row['Indicator Name'], row['Indicator Code'], row['1960'], row['2014'])
		if row['Country Name'] == pais:
			homicides = 0
			for i in anos:
				try:
					homicides += float(row[i])
				except:
					pass
					
			if homicides != 0:
				file.write('  node ['+'\n') 
				file.write('    id '+ str(id_node)+'\n')
				file.write('    label '+'"'+str(pais) + '"'+'\n')
				file.write('    homicides '+'"'+str(homicides) + '"'+'\n')
				id_node +=1
				countries2.append(pais)
				file.write('  ]'+'\n')	
		else: 
		#	print("Entrou 2")
			homicides = 0

print('oi')
#Adiciona todos as possíveis origens e destino em um dicionário para evitar edges repetidas
for index, row in df.iterrows():


	if str(row['Origin']) != 'Various/Unknown' and str(row['Country / territory of asylum/residence']) != 'Various/Unknown':

		if ('"' + str(row['Origin']) + ' -> ' + str(row['Country / territory of asylum/residence'])+'"') not in dic:
			if row['Value'] == "*":
				row['Value'] = 0
			dic['"' + str(row['Origin']) + ' -> ' + str(row['Country / territory of asylum/residence'])+'"'] = [[float(row['Value'])],0]
		else:
			try:
				dic['"' + str(row['Origin']) + ' -> ' + str(row['Country / territory of asylum/residence'])+'"'][0].append(float(row['Value'])/1)
				#print("Entrou aqui")
			except:
				dic['"' + str(row['Origin']) + ' -> ' + str(row['Country / territory of asylum/residence'])+'"'][0].append(0.0)
				#print("Deu erro")


## Cria todas as edges existentes no arquivo .gml trocando a posicao dic[1] = 1 para mostrar que aquele destino já foi preenchido e evitar repetição
for index, row in df.iterrows():

	if str(row['Origin']) != 'Various/Unknown' and str(row['Country / territory of asylum/residence']) != 'Various/Unknown':
		if str(row['Origin']) in countries2 and str(row['Country / territory of asylum/residence']) in countries2:
			if dic['"' + str(row['Origin']) + ' -> ' + str(row['Country / territory of asylum/residence'])+'"'][1] == 0:
				file.write('  edge ['+'\n') 
				file.write('    source '+ str(countries2.index(row['Origin']))+'\n')
				file.write('    target '+ str(countries2.index(row['Country / territory of asylum/residence']))+'\n')
				file.write('    label '+ '"' + str(row['Origin']) + ' -> ' + str(row['Country / territory of asylum/residence'])+'"'+'\n')
				file.write('    weight ' + str(sum(dic['"' + str(row['Origin']) + ' -> ' + str(row['Country / territory of asylum/residence'])+'"'][0]))+'\n')
				file.write('  ]'+'\n')
				dic['"' + str(row['Origin']) + ' -> ' + str(row['Country / territory of asylum/residence'])+'"'][1] = 1
	#print(dic)
file.write(']'+'\n')


file.close() 